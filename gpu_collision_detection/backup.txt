
/* TODO */
void
	printPair(BinSpherePairArray*, int start = 0, int end = -1);

void printPair(BinSpherePairArray* pairArray, int start, int end) {
	if (start == -1)
		start = 0;
	if (end == -1)
		end = pairArray->size;

	for (int i = start; i < end; i++) {
		printf("binID = %d,\t\t objectID = %d\n",
				pairArray->objects[i].binID, pairArray->objects[i].objectID);
	}
}

#ifdef FUNC_SPLIT_PRINT
	printf("[split] total number of pairs: %d\n", numOfPairs);
	printf("[split] minIDX = %d, minIDY = %d, minIDZ = %d\n", \
							minIDX, minIDY, minIDZ);
	printf("[split] maxIDX = %d, maxIDY = %d, maxIDZ = %d\n", \
							maxIDX, maxIDY, maxIDZ);
	printf("[split] sizeIDX = %d, sizeIDY = %d, sizeIDZ = %d\n", \
			maxIDX - minIDX + 1, maxIDY - minIDY + 1, maxIDZ - minIDZ + 1);
	printf("[split] bitwidthIDX = %d, bitwidthIDY = %d, bitwidthIDZ = %d\n", \
									bitwidthIDX, bitwidthIDY, bitwidthIDZ);
#endif


__host__ __device__ unsigned int bitreverse(unsigned int number) {
	number = ((0xf0f0f0f0 & number) >> 4) | ((0x0f0f0f0f & number) << 4);
	number = ((0xcccccccc & number) >> 2) | ((0x33333333 & number) << 2);
	number = ((0xaaaaaaaa & number) >> 1) | ((0x55555555 & number) << 1);
	return number;
}

/**
 * CUDA kernel function that reverses the order of bits in each element of the array.
 */
__global__ void bitreverse(void *data) {
	unsigned int *idata = (unsigned int*) data;
	idata[threadIdx.x] = bitreverse(idata[threadIdx.x]);
}

__global__ void checkCollision(Sphere *spheres, BinSpherePair *pairs,
							   BinSphereData *data, int *detectCount,
							   int numOfThreads, float halfBinRate) {
	int threadId = blockIdx.x * blockDim.x + threadIdx.x;
	int numDetected = 0;

	if (threadId < numOfThreads) {
		uint binID = data[threadId].binID;
		uint startIndex = data[threadId].startIndex;
		uint endIndex = startIndex + data[threadId].numOfObjects;

		for (uint objA = startIndex; objA < endIndex; objA++) {
			for (uint objB = objA + 1; objB < endIndex; objB++) {
				Sphere sphereA = spheres[pairs[objA].objectID];
				Sphere sphereB = spheres[pairs[objB].objectID];

				float distX = sphereA.x - sphereB.x;
				float distY = sphereA.y - sphereB.y;
				float distZ = sphereA.z - sphereB.z;

				float distC = sqrt(distX * distX + distY * distY + distZ * distZ);
				float distR = sphereA.r + sphereB.r;

				if (distC <= distR) {
					float idx = (sphereA.x + sphereB.x) * halfBinRate;
					float idy = (sphereA.y + sphereB.y) * halfBinRate;
					float idz = (sphereA.z + sphereB.z) * halfBinRate;

					#define MC_FloorCast_STG7(v) \
						(v >= 0) ? static_cast<int>(v) : static_cast<int>(v) - 1;

					int x = MC_FloorCast_STG7(idx);
					int y = MC_FloorCast_STG7(idy);
					int z = MC_FloorCast_STG7(idz);

					uint key = MC_Key(x, y, z);

					if (key == binID) {
						numDetected++;
					}

					numDetected++;
				}
			}
		}
		detectCount[threadId] = numDetected;
	}
}


typedef Sphere* SphereLine;

SphereLine *memory_relayout(SphereArray* sphereArray, BinSpherePairArray* pairArray, BinSphereDataArray *dataArray) {
	Sphere *spheres = sphereArray->objects;
	BinSpherePair *pairs = pairArray->objects;
	BinSphereData *data = dataArray->objects;
	uint numOfData = dataArray->size;

	SphereLine *sphereLines = new SphereLine[32];
	for (int i = 0; i < 32; i++) {
		sphereLines[i] = new Sphere[numOfData];
	}

	for (uint i = 0; i < numOfData; i++) {
		uint startIndex = data[i].startIndex;
		uint numOfObjects = data[i].numOfObjects;

		for (uint k = 0; k < numOfObjects; k++) {
			sphereLines[k][i] = spheres[pairs[startIndex+k].objectID];
		}
	}

	return sphereLines;
}

		uint binID = data[threadId].binID;
		uint numOfObjects = data[threadId].numOfObjects;
		uint startIndex = data[threadId].startIndex;

		Sphere localSpheres[32];
		for (uint i = 0; i < numOfObjects; i++) {
			localSpheres[i] = spheres[pairs[startIndex+i].objectID];
		}

			Sphere sphereA = localSpheres[objA];

			for (uint objB = objA + 1; objB < numOfObjects; objB++) {
				Sphere sphereB = localSpheres[objB];

				checkPair(sphereA, sphereB, binID, halfBinRate, numDetected);
			}

		}
		detectCount[threadId] = numDetected;
		
		
		__global__ void checkCollision(Sphere *spheres, BinSpherePair *pairs,
							   BinSphereData *data, int *detectCount,
							   int numOfThreads, float halfBinRate) {
	int threadId = blockIdx.x * blockDim.x + threadIdx.x;
	int numDetected = 0;

	if (threadId < numOfThreads) {
		Sphere s00, s01, s02, s03, s04, s05, s06, s07,
			   s08, s09, s10, s11, s12, s13, s14, s15,
			   s16, s17, s18, s19, s20, s21, s22, s23,
			   s24, s25, s26, s27, s28, s29, s30, s31;

		uint binID = data[threadId].binID;
		uint numOfObjects = data[threadId].numOfObjects;
		uint startIndex = data[threadId].startIndex;

		#define MC_SetValue(s, i) \
			s = spheres[pairs[startIndex+i].objectID];

		#define MC_CheckPair(sphereA, sphereB) \
			checkPair(sphereA, sphereB, \
					  binID, halfBinRate, numDetected);

		#define MC_CheckPoint(i) \
			if (numOfObjects < i) goto RETURN;

		MC_SetValue(s00, 0);

		MC_CheckPoint(2);
		MC_SetValue(s01, 1);
		MC_CheckPair(s00, s01);

		MC_CheckPoint(3);
		MC_SetValue(s02, 2);
		MC_CheckPair(s00, s02);
		MC_CheckPair(s01, s02);

		MC_CheckPoint(4);
		MC_SetValue(s03, 3);
		MC_CheckPair(s00, s03);
		MC_CheckPair(s01, s03);
		MC_CheckPair(s02, s03);

		MC_CheckPoint(5);
		MC_SetValue(s04, 4);
		MC_CheckPair(s00, s04);
		MC_CheckPair(s01, s04);
		MC_CheckPair(s02, s04);
		MC_CheckPair(s03, s04);

		MC_CheckPoint(6);
		MC_SetValue(s05, 5);
		MC_CheckPair(s00, s05);
		MC_CheckPair(s01, s05);
		MC_CheckPair(s02, s05);
		MC_CheckPair(s03, s05);
		MC_CheckPair(s04, s05);

		MC_CheckPoint(7);
		MC_SetValue(s06, 6);
		MC_CheckPair(s00, s06);
		MC_CheckPair(s01, s06);
		MC_CheckPair(s02, s06);
		MC_CheckPair(s03, s06);
		MC_CheckPair(s04, s06);
		MC_CheckPair(s05, s06);

		MC_CheckPoint(8);
		MC_SetValue(s07, 7);
		MC_CheckPair(s00, s07);
		MC_CheckPair(s01, s07);
		MC_CheckPair(s02, s07);
		MC_CheckPair(s03, s07);
		MC_CheckPair(s04, s07);
		MC_CheckPair(s05, s07);
		MC_CheckPair(s06, s07);

		MC_CheckPoint(9);
		MC_SetValue(s08, 8);
		MC_CheckPair(s00, s08);
		MC_CheckPair(s01, s08);
		MC_CheckPair(s02, s08);
		MC_CheckPair(s03, s08);
		MC_CheckPair(s04, s08);
		MC_CheckPair(s05, s08);
		MC_CheckPair(s06, s08);
		MC_CheckPair(s07, s08);

		MC_CheckPoint(10);
		MC_SetValue(s09, 9);
		MC_CheckPair(s00, s09);
		MC_CheckPair(s01, s09);
		MC_CheckPair(s02, s09);
		MC_CheckPair(s03, s09);
		MC_CheckPair(s04, s09);
		MC_CheckPair(s05, s09);
		MC_CheckPair(s06, s09);
		MC_CheckPair(s07, s09);
		MC_CheckPair(s08, s09);

		MC_CheckPoint(11);
		MC_SetValue(s10, 10);
		MC_CheckPair(s00, s10);
		MC_CheckPair(s01, s10);
		MC_CheckPair(s02, s10);
		MC_CheckPair(s03, s10);
		MC_CheckPair(s04, s10);
		MC_CheckPair(s05, s10);
		MC_CheckPair(s06, s10);
		MC_CheckPair(s07, s10);
		MC_CheckPair(s08, s10);
		MC_CheckPair(s09, s10);

		MC_CheckPoint(12);
		MC_SetValue(s11, 11);
		MC_CheckPair(s00, s11);
		MC_CheckPair(s01, s11);
		MC_CheckPair(s02, s11);
		MC_CheckPair(s03, s11);
		MC_CheckPair(s04, s11);
		MC_CheckPair(s05, s11);
		MC_CheckPair(s06, s11);
		MC_CheckPair(s07, s11);
		MC_CheckPair(s08, s11);
		MC_CheckPair(s09, s11);
		MC_CheckPair(s10, s11);

		MC_CheckPoint(13);
		MC_SetValue(s12, 12);
		MC_CheckPair(s00, s12);
		MC_CheckPair(s01, s12);
		MC_CheckPair(s02, s12);
		MC_CheckPair(s03, s12);
		MC_CheckPair(s04, s12);
		MC_CheckPair(s05, s12);
		MC_CheckPair(s06, s12);
		MC_CheckPair(s07, s12);
		MC_CheckPair(s08, s12);
		MC_CheckPair(s09, s12);
		MC_CheckPair(s10, s12);
		MC_CheckPair(s11, s12);

		MC_CheckPoint(14);
		MC_SetValue(s13, 13);
		MC_CheckPair(s00, s13);
		MC_CheckPair(s01, s13);
		MC_CheckPair(s02, s13);
		MC_CheckPair(s03, s13);
		MC_CheckPair(s04, s13);
		MC_CheckPair(s05, s13);
		MC_CheckPair(s06, s13);
		MC_CheckPair(s07, s13);
		MC_CheckPair(s08, s13);
		MC_CheckPair(s09, s13);
		MC_CheckPair(s10, s13);
		MC_CheckPair(s11, s13);
		MC_CheckPair(s12, s13);

		MC_CheckPoint(15);
		MC_SetValue(s14, 14);
		MC_CheckPair(s00, s14);
		MC_CheckPair(s01, s14);
		MC_CheckPair(s02, s14);
		MC_CheckPair(s03, s14);
		MC_CheckPair(s04, s14);
		MC_CheckPair(s05, s14);
		MC_CheckPair(s06, s14);
		MC_CheckPair(s07, s14);
		MC_CheckPair(s08, s14);
		MC_CheckPair(s09, s14);
		MC_CheckPair(s10, s14);
		MC_CheckPair(s11, s14);
		MC_CheckPair(s12, s14);
		MC_CheckPair(s13, s14);
/*
		MC_CheckPoint(16);
		MC_SetValue(s15, 15);
		MC_CheckPair(s00, s15);
		MC_CheckPair(s01, s15);
		MC_CheckPair(s02, s15);
		MC_CheckPair(s03, s15);
		MC_CheckPair(s04, s15);
		MC_CheckPair(s05, s15);
		MC_CheckPair(s06, s15);
		MC_CheckPair(s07, s15);
		MC_CheckPair(s08, s15);
		MC_CheckPair(s09, s15);
		MC_CheckPair(s10, s15);
		MC_CheckPair(s11, s15);
		MC_CheckPair(s12, s15);
		MC_CheckPair(s13, s15);
		MC_CheckPair(s14, s15);

		MC_CheckPoint(17);
		MC_SetValue(s16, 16);
		MC_CheckPair(s00, s16);
		MC_CheckPair(s01, s16);
		MC_CheckPair(s02, s16);
		MC_CheckPair(s03, s16);
		MC_CheckPair(s04, s16);
		MC_CheckPair(s05, s16);
		MC_CheckPair(s06, s16);
		MC_CheckPair(s07, s16);
		MC_CheckPair(s08, s16);
		MC_CheckPair(s09, s16);
		MC_CheckPair(s10, s16);
		MC_CheckPair(s11, s16);
		MC_CheckPair(s12, s16);
		MC_CheckPair(s13, s16);
		MC_CheckPair(s14, s16);
		MC_CheckPair(s15, s16);

		MC_CheckPoint(18);
		MC_SetValue(s17, 17);
		MC_CheckPair(s00, s17);
		MC_CheckPair(s01, s17);
		MC_CheckPair(s02, s17);
		MC_CheckPair(s03, s17);
		MC_CheckPair(s04, s17);
		MC_CheckPair(s05, s17);
		MC_CheckPair(s06, s17);
		MC_CheckPair(s07, s17);
		MC_CheckPair(s08, s17);
		MC_CheckPair(s09, s17);
		MC_CheckPair(s10, s17);
		MC_CheckPair(s11, s17);
		MC_CheckPair(s12, s17);
		MC_CheckPair(s13, s17);
		MC_CheckPair(s14, s17);
		MC_CheckPair(s15, s17);
		MC_CheckPair(s16, s17);

		MC_CheckPoint(19);
		MC_SetValue(s18, 18);
		MC_CheckPair(s00, s18);
		MC_CheckPair(s01, s18);
		MC_CheckPair(s02, s18);
		MC_CheckPair(s03, s18);
		MC_CheckPair(s04, s18);
		MC_CheckPair(s05, s18);
		MC_CheckPair(s06, s18);
		MC_CheckPair(s07, s18);
		MC_CheckPair(s08, s18);
		MC_CheckPair(s09, s18);
		MC_CheckPair(s10, s18);
		MC_CheckPair(s11, s18);
		MC_CheckPair(s12, s18);
		MC_CheckPair(s13, s18);
		MC_CheckPair(s14, s18);
		MC_CheckPair(s15, s18);
		MC_CheckPair(s16, s18);
		MC_CheckPair(s17, s18);

		MC_CheckPoint(20);
		MC_SetValue(s19, 19);
		MC_CheckPair(s00, s19);
		MC_CheckPair(s01, s19);
		MC_CheckPair(s02, s19);
		MC_CheckPair(s03, s19);
		MC_CheckPair(s04, s19);
		MC_CheckPair(s05, s19);
		MC_CheckPair(s06, s19);
		MC_CheckPair(s07, s19);
		MC_CheckPair(s08, s19);
		MC_CheckPair(s09, s19);
		MC_CheckPair(s10, s19);
		MC_CheckPair(s11, s19);
		MC_CheckPair(s12, s19);
		MC_CheckPair(s13, s19);
		MC_CheckPair(s14, s19);
		MC_CheckPair(s15, s19);
		MC_CheckPair(s16, s19);
		MC_CheckPair(s17, s19);
		MC_CheckPair(s18, s19);

		MC_CheckPoint(21);
		MC_SetValue(s20, 20);
		MC_CheckPair(s00, s20);
		MC_CheckPair(s01, s20);
		MC_CheckPair(s02, s20);
		MC_CheckPair(s03, s20);
		MC_CheckPair(s04, s20);
		MC_CheckPair(s05, s20);
		MC_CheckPair(s06, s20);
		MC_CheckPair(s07, s20);
		MC_CheckPair(s08, s20);
		MC_CheckPair(s09, s20);
		MC_CheckPair(s10, s20);
		MC_CheckPair(s11, s20);
		MC_CheckPair(s12, s20);
		MC_CheckPair(s13, s20);
		MC_CheckPair(s14, s20);
		MC_CheckPair(s15, s20);
		MC_CheckPair(s16, s20);
		MC_CheckPair(s17, s20);
		MC_CheckPair(s18, s20);
		MC_CheckPair(s19, s20);

		MC_CheckPoint(22);
		MC_SetValue(s21, 21);
		MC_CheckPair(s00, s21);
		MC_CheckPair(s01, s21);
		MC_CheckPair(s02, s21);
		MC_CheckPair(s03, s21);
		MC_CheckPair(s04, s21);
		MC_CheckPair(s05, s21);
		MC_CheckPair(s06, s21);
		MC_CheckPair(s07, s21);
		MC_CheckPair(s08, s21);
		MC_CheckPair(s09, s21);
		MC_CheckPair(s10, s21);
		MC_CheckPair(s11, s21);
		MC_CheckPair(s12, s21);
		MC_CheckPair(s13, s21);
		MC_CheckPair(s14, s21);
		MC_CheckPair(s15, s21);
		MC_CheckPair(s16, s21);
		MC_CheckPair(s17, s21);
		MC_CheckPair(s18, s21);
		MC_CheckPair(s19, s21);
		MC_CheckPair(s20, s21);

		MC_CheckPoint(23);
		MC_SetValue(s22, 22);
		MC_CheckPair(s00, s22);
		MC_CheckPair(s01, s22);
		MC_CheckPair(s02, s22);
		MC_CheckPair(s03, s22);
		MC_CheckPair(s04, s22);
		MC_CheckPair(s05, s22);
		MC_CheckPair(s06, s22);
		MC_CheckPair(s07, s22);
		MC_CheckPair(s08, s22);
		MC_CheckPair(s09, s22);
		MC_CheckPair(s10, s22);
		MC_CheckPair(s11, s22);
		MC_CheckPair(s12, s22);
		MC_CheckPair(s13, s22);
		MC_CheckPair(s14, s22);
		MC_CheckPair(s15, s22);
		MC_CheckPair(s16, s22);
		MC_CheckPair(s17, s22);
		MC_CheckPair(s18, s22);
		MC_CheckPair(s19, s22);
		MC_CheckPair(s20, s22);
		MC_CheckPair(s21, s22);

		MC_CheckPoint(24);
		MC_SetValue(s23, 23);
		MC_CheckPair(s00, s23);
		MC_CheckPair(s01, s23);
		MC_CheckPair(s02, s23);
		MC_CheckPair(s03, s23);
		MC_CheckPair(s04, s23);
		MC_CheckPair(s05, s23);
		MC_CheckPair(s06, s23);
		MC_CheckPair(s07, s23);
		MC_CheckPair(s08, s23);
		MC_CheckPair(s09, s23);
		MC_CheckPair(s10, s23);
		MC_CheckPair(s11, s23);
		MC_CheckPair(s12, s23);
		MC_CheckPair(s13, s23);
		MC_CheckPair(s14, s23);
		MC_CheckPair(s15, s23);
		MC_CheckPair(s16, s23);
		MC_CheckPair(s17, s23);
		MC_CheckPair(s18, s23);
		MC_CheckPair(s19, s23);
		MC_CheckPair(s20, s23);
		MC_CheckPair(s21, s23);
		MC_CheckPair(s22, s23);

		MC_CheckPoint(25);
		MC_SetValue(s24, 24);
		MC_CheckPair(s00, s24);
		MC_CheckPair(s01, s24);
		MC_CheckPair(s02, s24);
		MC_CheckPair(s03, s24);
		MC_CheckPair(s04, s24);
		MC_CheckPair(s05, s24);
		MC_CheckPair(s06, s24);
		MC_CheckPair(s07, s24);
		MC_CheckPair(s08, s24);
		MC_CheckPair(s09, s24);
		MC_CheckPair(s10, s24);
		MC_CheckPair(s11, s24);
		MC_CheckPair(s12, s24);
		MC_CheckPair(s13, s24);
		MC_CheckPair(s14, s24);
		MC_CheckPair(s15, s24);
		MC_CheckPair(s16, s24);
		MC_CheckPair(s17, s24);
		MC_CheckPair(s18, s24);
		MC_CheckPair(s19, s24);
		MC_CheckPair(s20, s24);
		MC_CheckPair(s21, s24);
		MC_CheckPair(s22, s24);
		MC_CheckPair(s23, s24);

		MC_CheckPoint(26);
		MC_SetValue(s25, 25);
		MC_CheckPair(s00, s25);
		MC_CheckPair(s01, s25);
		MC_CheckPair(s02, s25);
		MC_CheckPair(s03, s25);
		MC_CheckPair(s04, s25);
		MC_CheckPair(s05, s25);
		MC_CheckPair(s06, s25);
		MC_CheckPair(s07, s25);
		MC_CheckPair(s08, s25);
		MC_CheckPair(s09, s25);
		MC_CheckPair(s10, s25);
		MC_CheckPair(s11, s25);
		MC_CheckPair(s12, s25);
		MC_CheckPair(s13, s25);
		MC_CheckPair(s14, s25);
		MC_CheckPair(s15, s25);
		MC_CheckPair(s16, s25);
		MC_CheckPair(s17, s25);
		MC_CheckPair(s18, s25);
		MC_CheckPair(s19, s25);
		MC_CheckPair(s20, s25);
		MC_CheckPair(s21, s25);
		MC_CheckPair(s22, s25);
		MC_CheckPair(s23, s25);
		MC_CheckPair(s24, s25);

		MC_CheckPoint(27);
		MC_SetValue(s26, 26);
		MC_CheckPair(s00, s26);
		MC_CheckPair(s01, s26);
		MC_CheckPair(s02, s26);
		MC_CheckPair(s03, s26);
		MC_CheckPair(s04, s26);
		MC_CheckPair(s05, s26);
		MC_CheckPair(s06, s26);
		MC_CheckPair(s07, s26);
		MC_CheckPair(s08, s26);
		MC_CheckPair(s09, s26);
		MC_CheckPair(s10, s26);
		MC_CheckPair(s11, s26);
		MC_CheckPair(s12, s26);
		MC_CheckPair(s13, s26);
		MC_CheckPair(s14, s26);
		MC_CheckPair(s15, s26);
		MC_CheckPair(s16, s26);
		MC_CheckPair(s17, s26);
		MC_CheckPair(s18, s26);
		MC_CheckPair(s19, s26);
		MC_CheckPair(s20, s26);
		MC_CheckPair(s21, s26);
		MC_CheckPair(s22, s26);
		MC_CheckPair(s23, s26);
		MC_CheckPair(s24, s26);
		MC_CheckPair(s25, s26);

		MC_CheckPoint(28);
		MC_SetValue(s27, 27);
		MC_CheckPair(s00, s27);
		MC_CheckPair(s01, s27);
		MC_CheckPair(s02, s27);
		MC_CheckPair(s03, s27);
		MC_CheckPair(s04, s27);
		MC_CheckPair(s05, s27);
		MC_CheckPair(s06, s27);
		MC_CheckPair(s07, s27);
		MC_CheckPair(s08, s27);
		MC_CheckPair(s09, s27);
		MC_CheckPair(s10, s27);
		MC_CheckPair(s11, s27);
		MC_CheckPair(s12, s27);
		MC_CheckPair(s13, s27);
		MC_CheckPair(s14, s27);
		MC_CheckPair(s15, s27);
		MC_CheckPair(s16, s27);
		MC_CheckPair(s17, s27);
		MC_CheckPair(s18, s27);
		MC_CheckPair(s19, s27);
		MC_CheckPair(s20, s27);
		MC_CheckPair(s21, s27);
		MC_CheckPair(s22, s27);
		MC_CheckPair(s23, s27);
		MC_CheckPair(s24, s27);
		MC_CheckPair(s25, s27);
		MC_CheckPair(s26, s27);

		MC_CheckPoint(29);
		MC_SetValue(s28, 28);
		MC_CheckPair(s00, s28);
		MC_CheckPair(s01, s28);
		MC_CheckPair(s02, s28);
		MC_CheckPair(s03, s28);
		MC_CheckPair(s04, s28);
		MC_CheckPair(s05, s28);
		MC_CheckPair(s06, s28);
		MC_CheckPair(s07, s28);
		MC_CheckPair(s08, s28);
		MC_CheckPair(s09, s28);
		MC_CheckPair(s10, s28);
		MC_CheckPair(s11, s28);
		MC_CheckPair(s12, s28);
		MC_CheckPair(s13, s28);
		MC_CheckPair(s14, s28);
		MC_CheckPair(s15, s28);
		MC_CheckPair(s16, s28);
		MC_CheckPair(s17, s28);
		MC_CheckPair(s18, s28);
		MC_CheckPair(s19, s28);
		MC_CheckPair(s20, s28);
		MC_CheckPair(s21, s28);
		MC_CheckPair(s22, s28);
		MC_CheckPair(s23, s28);
		MC_CheckPair(s24, s28);
		MC_CheckPair(s25, s28);
		MC_CheckPair(s26, s28);
		MC_CheckPair(s27, s28);

		MC_CheckPoint(30);
		MC_SetValue(s29, 29);
		MC_CheckPair(s00, s29);
		MC_CheckPair(s01, s29);
		MC_CheckPair(s02, s29);
		MC_CheckPair(s03, s29);
		MC_CheckPair(s04, s29);
		MC_CheckPair(s05, s29);
		MC_CheckPair(s06, s29);
		MC_CheckPair(s07, s29);
		MC_CheckPair(s08, s29);
		MC_CheckPair(s09, s29);
		MC_CheckPair(s10, s29);
		MC_CheckPair(s11, s29);
		MC_CheckPair(s12, s29);
		MC_CheckPair(s13, s29);
		MC_CheckPair(s14, s29);
		MC_CheckPair(s15, s29);
		MC_CheckPair(s16, s29);
		MC_CheckPair(s17, s29);
		MC_CheckPair(s18, s29);
		MC_CheckPair(s19, s29);
		MC_CheckPair(s20, s29);
		MC_CheckPair(s21, s29);
		MC_CheckPair(s22, s29);
		MC_CheckPair(s23, s29);
		MC_CheckPair(s24, s29);
		MC_CheckPair(s25, s29);
		MC_CheckPair(s26, s29);
		MC_CheckPair(s27, s29);
		MC_CheckPair(s28, s29);

		MC_CheckPoint(31);
		MC_SetValue(s30, 30);
		MC_CheckPair(s00, s30);
		MC_CheckPair(s01, s30);
		MC_CheckPair(s02, s30);
		MC_CheckPair(s03, s30);
		MC_CheckPair(s04, s30);
		MC_CheckPair(s05, s30);
		MC_CheckPair(s06, s30);
		MC_CheckPair(s07, s30);
		MC_CheckPair(s08, s30);
		MC_CheckPair(s09, s30);
		MC_CheckPair(s10, s30);
		MC_CheckPair(s11, s30);
		MC_CheckPair(s12, s30);
		MC_CheckPair(s13, s30);
		MC_CheckPair(s14, s30);
		MC_CheckPair(s15, s30);
		MC_CheckPair(s16, s30);
		MC_CheckPair(s17, s30);
		MC_CheckPair(s18, s30);
		MC_CheckPair(s19, s30);
		MC_CheckPair(s20, s30);
		MC_CheckPair(s21, s30);
		MC_CheckPair(s22, s30);
		MC_CheckPair(s23, s30);
		MC_CheckPair(s24, s30);
		MC_CheckPair(s25, s30);
		MC_CheckPair(s26, s30);
		MC_CheckPair(s27, s30);
		MC_CheckPair(s28, s30);
		MC_CheckPair(s29, s30);

		MC_CheckPoint(32);
		MC_SetValue(s31, 31);
		MC_CheckPair(s00, s31);
		MC_CheckPair(s01, s31);
		MC_CheckPair(s02, s31);
		MC_CheckPair(s03, s31);
		MC_CheckPair(s04, s31);
		MC_CheckPair(s05, s31);
		MC_CheckPair(s06, s31);
		MC_CheckPair(s07, s31);
		MC_CheckPair(s08, s31);
		MC_CheckPair(s09, s31);
		MC_CheckPair(s10, s31);
		MC_CheckPair(s11, s31);
		MC_CheckPair(s12, s31);
		MC_CheckPair(s13, s31);
		MC_CheckPair(s14, s31);
		MC_CheckPair(s15, s31);
		MC_CheckPair(s16, s31);
		MC_CheckPair(s17, s31);
		MC_CheckPair(s18, s31);
		MC_CheckPair(s19, s31);
		MC_CheckPair(s20, s31);
		MC_CheckPair(s21, s31);
		MC_CheckPair(s22, s31);
		MC_CheckPair(s23, s31);
		MC_CheckPair(s24, s31);
		MC_CheckPair(s25, s31);
		MC_CheckPair(s26, s31);
		MC_CheckPair(s27, s31);
		MC_CheckPair(s28, s31);
		MC_CheckPair(s29, s31);
		MC_CheckPair(s30, s31);
*/
	RETURN:
		detectCount[threadId] = numDetected;
	}
}
		
		
__global__ void checkCollision(Sphere *spheres, BinSpherePair *pairs,
							   BinSphereData *data, int *detectCount,
							   int numOfThreads, float halfBinRate) {
	int threadId = blockIdx.x * blockDim.x + threadIdx.x;
	int numDetected = 0;

	if (threadId < numOfThreads) {
		uint binID = data[threadId].binID;
		uint numOfObjects = data[threadId].numOfObjects;
		uint startIndex = data[threadId].startIndex;
		if (numOfObjects > 12)
			numOfObjects = 12;

		Sphere localSpheres[32];
		for (uint i = 0; i < numOfObjects; i++) {
			localSpheres[i] = spheres[pairs[startIndex+i].objectID];
		}

		for (uint objA = 1; objA < numOfObjects; objA++) {
			Sphere sphereA = localSpheres[objA];

			for (uint objB = 0; objB < objA; objB++) {
				Sphere sphereB = localSpheres[objB];

				checkPair(sphereA, sphereB, binID, halfBinRate, numDetected);
			}

		}
		detectCount[threadId] = numDetected;
	}
}

